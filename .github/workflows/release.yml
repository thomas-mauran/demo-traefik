name: Release Deployment

on:
  push:
    branches:
      - '**'

jobs:
  lint-api:
    name: API linter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: false

    - name: Lint with golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: api

    - name: go-test
      run: make test
      working-directory: api

  cleanup-ghcr-images:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - name: Delete untagged container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: 'api'
        package-type: 'container'
        min-versions-to-keep: 2
        delete-only-untagged-versions: fals

  prepare:
    needs: cleanup-ghcr-image
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set outputs
      id: vars
      run: |
        echo "version=$(date +%s)" >> $GITHUB_OUTPUT

  build-backend:
    needs:
      - lint-api
      - prepare
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        file: ./api/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/api:debug
          ghcr.io/${{ github.repository_owner }}/api:${{ needs.prepare.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
